{"version":3,"sources":["store/store.tsx","components/layouts/MainLayout/MainLayout.tsx","components/routes/Route/Route.tsx","components/ui-kit/TextInput/TextInput.tsx","components/ui-kit/Button/Button.tsx","api/webSocketAPI.ts","contstants/socketCommands.ts","hooks/useWebSocket.ts","contstants/pathNames.ts","components/forms/LoginForm/LoginForm.tsx","components/pages/LoginPage/LoginPage.tsx","components/ui-kit/Header/Header.tsx","components/ui-kit/ChatMessagesList/ChatMessage/ChatMessage.tsx","components/ui-kit/ChatMessagesList/UserActivityInfo/UserActivityInfo.tsx","contstants/colors.ts","components/ui-kit/ChatMessagesList/TypingMessage/TypingMessage.tsx","components/ui-kit/ChatMessagesList/ChatMessagesList.tsx","utils/userColor.ts","components/forms/SubmitChatMessageForm/SubmitChatMessageForm.tsx","components/pages/ChatRoomPage/ChatRoomPage.tsx","utils/socketUtils.ts","components/routes/Routes.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","userName","isLogged","store","createContext","Provider","StateProvider","props","children","useReducer","state","action","type","payload","dispatch","value","MainLayout","className","RouteWrapper","Component","component","rest","Layout","render","TextInput","name","placeholder","onChange","inputRef","useRef","useEffect","current","focus","ref","autoComplete","defaultProps","Button","text","onClick","socket","updateInterval","SocketHandlerNames","SocketCommands","subscribers","messageHandler","e","message","data","forEach","cb","chatAPI","connect","this","closeConnection","Promise","resolve","reject","WebSocket","onopen","setInterval","send","console","log","onerror","login","addEventListener","sucbscribe","callback","push","unSubscribe","filter","sendMessage","clearInterval","removeEventListener","close","PathNames","useWebsocket","useContext","a","readyState","OPEN","SEND","JSON","stringify","ADD_USER","unsucbscribe","newMessage","NEW_MESSAGE","sendTypingMessage","messageName","TYPYNG","STOP_TYPING","username","logout","LoginForm","useState","userData","setUserData","history","useHistory","target","preventDefault","trim","CHAT_ROOM","LoginPage","Header","onActionClick","title","defautProps","ChatMessage","userMessage","userColor","scrollIntoView","style","backgroundColor","charAt","toUpperCase","color","MemoizedChatMessage","React","memo","UserActivityInfo","userQuantity","MemoizedUserActivityInfo","COLORS","TypingMessage","MemoizedTypingMessage","ChatMessagesList","messages","typingData","memoizedGetUserColor","cache","Map","has","get","hash","i","length","charCodeAt","index","Math","abs","set","getUserNameColor","renderChatMessage","id","renderUserActivityInfo","numUsers","map","USER_JOINED","USER_LEFT","LOGIN","renderComponentByType","SubmitChatMessageForm","onSubmit","sendTyping","setValue","startTyping","setStartTyping","timeout","setTimeout","clearTimeout","ChatRoomPage","messagesData","setMessagesData","setTypingData","contextState","messagesHandler","sliceMessage","slice","parsedMessage","parse","uuidv4","parseSocketMessage","prev","filtered","obj","user","createUserSentMessageData","Routes","basename","Route","exact","path","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee9c327c.chunk.js","sourcesContent":["import { Context } from 'node:vm';\nimport React, { createContext, ReactElement, ReactNode, useReducer } from 'react';\nimport { IState } from '../interfaces/IStoreState';\n\ninterface IStateProviderProps {\n    children: ReactNode;\n};\n\nconst initialState: IState = { userName: '', isLogged: false };\nconst store = createContext<Context>(initialState);\nconst { Provider } = store;\n\nconst StateProvider = (props: IStateProviderProps): ReactElement => {\n    const { children } = props;\n    const [state, dispatch] = useReducer((state: IState, action: any) => {\n        switch (action.type) {\n            case 'LOGIN':\n                state = { ...action.payload, isLogged: true };\n                return state;\n            case 'LOG_OUT':\n                state = { ...initialState }\n                return state;\n            default:\n                return state;\n        };\n    }, initialState);\n\n    return (<Provider value={{ state, dispatch }}>{children}</Provider>)\n};\n\nexport { store, StateProvider };\n","import React, { ReactElement } from 'react';\n\nimport './MainLayout.scss';\n\nconst MainLayout = (props: any): ReactElement => {\n    const { children } = props;\n    \n    return (\n        <div className=\"main-layout\">\n            {children}\n        </div>\n    )\n};\n\nexport default MainLayout;","import React, { FC } from 'react';\nimport { Route } from 'react-router-dom';\nimport MainLayout from '../../layouts/MainLayout';\n\nconst RouteWrapper = (props: any) => {\n    const {\n        component: Component,\n        ...rest\n    } = props;\n\n    const Layout: FC = MainLayout;\n\n    return (\n        <Route\n            {...rest}\n            render = {props => (\n                <Layout>\n                    <Component {...props} />\n                </Layout>\n            )}\n        />    \n    );\n}\n\nexport default RouteWrapper;\n","import React, { ReactElement, useEffect, useRef } from 'react';\n\nimport './TextInput.scss';\n\ninterface ITextInputProps {\n    name: string;\n    value: string;\n    placeholder: string;\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void | null;\n}\n\nconst TextInput = (props: ITextInputProps): ReactElement=> {\n    const {\n        name,\n        value,\n        placeholder,\n        onChange,\n    } = props;\n\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        inputRef.current?.focus();\n    });\n    \n\n    return (\n        <div className=\"text-input\">\n            <input\n                ref={inputRef}\n                name={name}\n                className=\"input\"\n                value={value}\n                autoComplete=\"off\"\n                placeholder={placeholder}\n                onChange={onChange}\n            />\n        </div>\n    )\n};\n\nTextInput.defaultProps = {\n    name: '',\n    value: '',\n    placeholder: '',\n    onChange: null,\n};\n\nexport default TextInput;\n","import React, { ReactElement } from 'react';\n\nimport './Button.scss';\n\ninterface IButtonProps {\n    type: 'submit' | 'button';\n    text?: string;\n    onClick: (e: React.MouseEvent<HTMLButtonElement>) => void | null;\n}\n\nconst Button = (props: IButtonProps): ReactElement => {\n    const { type, text, onClick } = props;\n\n    return (\n        <button\n            className=\"button\"\n            type={type}\n            onClick={onClick}\n        >\n            {text}\n        </button>\n    )\n}\n\nButton.defaultProps = {\n    text: '',\n    type: 'button',\n    onClick: null,\n};\n\nexport default Button;\n","import { IChatApi } from '../interfaces/IChatAPI';\n\nconst URL: string = 'wss://socketio-chat-h9jt.herokuapp.com/socket.io/?EIO=3&transport=websocket';\nconst UPDATE_COMMAND: string = '2';\nconst TIME = 20000;\n\nlet socket: WebSocket;\nlet subscribers = [] as Array<(message: string) => void>;\nlet updateInterval: NodeJS.Timeout;\n\nconst messageHandler = (e: MessageEvent): void => {\n    const message = (e?.data || '');\n    subscribers.forEach((cb: Function) => cb(message));\n};\n\nexport const chatAPI: IChatApi = {\n    connect(): Promise<WebSocket> {\n        if (socket) this.closeConnection();\n        return new Promise((resolve, reject) => {\n            socket = new WebSocket(URL);\n            socket.onopen = () => {\n                resolve(socket);\n                updateInterval = setInterval(() => socket.send(UPDATE_COMMAND), TIME)\n                console.log('WEB SOCKET CHANNEL CONNECTED');\n            }\n\n            socket.onerror = () => {\n                reject(socket);\n            }\n            \n        });\n    },\n    login(message: string): void {\n        socket?.send(message);\n        socket.addEventListener('message', messageHandler);\n    },\n    sucbscribe(callback: (message: string) => void): void {\n        subscribers.push(callback);\n    },\n    unSubscribe(callback: (message: string) => void): void {\n        subscribers = subscribers.filter(cb => cb !== callback);\n    },\n    sendMessage(message: string) {\n        socket?.send(message);\n    },\n    closeConnection():void {\n        if (updateInterval) clearInterval(updateInterval);\n        socket?.removeEventListener('message', messageHandler);\n        socket?.close();\n        console.log('WEB SOCKET CHANNEL CLOSED');\n    },\n};\n","export enum SocketHandlerNames {\n    ADD_USER = 'add user',\n    LOGIN = 'login',\n    USER_JOINED = 'user joined',\n    USER_LEFT = 'user left',\n    NEW_MESSAGE = 'new message',\n    TYPYNG = 'typing',\n    STOP_TYPING = 'stop typing',\n};\n\nexport enum SocketCommands {\n    SEND = '42',\n    UPDATE = '2',\n};\n","import { useContext } from 'react';\nimport { chatAPI } from '../api/webSocketAPI';\nimport { SocketHandlerNames, SocketCommands } from '../contstants/socketCommands';\nimport { store } from '../store/store';\n\nconst useWebsocket = () => {\n    const userData = useContext(store);\n    const { dispatch } = userData;\n\n    const login = async (userName: string, callback: Function) => {\n        try {\n            const socket: WebSocket = await chatAPI.connect();\n            if (socket.readyState === WebSocket.OPEN) {\n                const message: string = SocketCommands.SEND + JSON.stringify([SocketHandlerNames.ADD_USER, userName]);\n                chatAPI.login(message);\n                dispatch({ type: 'LOGIN', payload: { userName }})\n                callback();\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const sucbscribe = (callback: (message: string) => void): void => {\n        chatAPI.sucbscribe(callback);\n    };\n\n    const unsucbscribe = (callback: (message: string) => void): void => {\n        chatAPI.unSubscribe(callback);\n    };\n\n    const sendMessage = (message: string): void => {\n        const newMessage: string = SocketCommands.SEND + JSON.stringify([SocketHandlerNames.NEW_MESSAGE, message]);\n        chatAPI.sendMessage(newMessage);\n    };\n\n    const sendTypingMessage = (userName: string, send: boolean): void => {\n        const messageName: string = send ? SocketHandlerNames.TYPYNG : SocketHandlerNames.STOP_TYPING;\n        const newMessage: string = SocketCommands.SEND + JSON.stringify([messageName, {username: userName}]);\n        chatAPI.sendMessage(newMessage);\n    };\n\n    const logout = (): void => {\n        dispatch({ type: 'LOG_OUT' });\n        chatAPI.closeConnection();\n    };\n\n    return {\n        login,\n        sucbscribe,\n        unsucbscribe,\n        sendMessage,\n        sendTypingMessage,\n        logout,\n    };\n};\n\nexport default useWebsocket;\n","export enum PathNames {\n    LOGIN = '/',\n    CHAT_ROOM = '/chat-room',\n};\n","import React, { ReactElement, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport TextInput from '../../ui-kit/TextInput';\nimport Button from '../../ui-kit/Button';\nimport useWebsocket from '../../../hooks/useWebSocket';\nimport { PathNames } from  '../../../contstants/pathNames';\n\nimport './LoginForm.scss';\n\nconst LoginForm = (): ReactElement => {\n    const [userData, setUserData] = useState<{ [userName: string]: string }>({ userName: '' });\n    const history = useHistory();\n    const { login } = useWebsocket();\n\n    const handleSubmit = (e: React.MouseEvent<HTMLButtonElement>): void => {\n        e.preventDefault();\n\n        if (userData.userName.trim()) {\n            login(userData.userName.trim(), () => history.push(PathNames.CHAT_ROOM));\n            setUserData({ userName: '' });\n        }\n    };\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setUserData({ [e.target.name]: e.target.value });\n    };\n\n    return (\n        <div className=\"login-form\">\n            <form action=\"\" className=\"login-form__form\">\n                <div className=\"login-form__field-wrapper\">\n                    <TextInput name=\"userName\" placeholder=\"Name\" value={userData.userName} onChange={handleChange}/>\n                </div>\n                <div className=\"login-form__field-wrapper\">\n                    <Button text=\"Join\" type=\"submit\" onClick={handleSubmit}/>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport LoginForm from '../../forms/LoginForm';\n\nimport './LoginPage.scss';\n\nconst LoginPage = (): React.ReactElement => {\n    return (\n        <div className=\"login-page\">\n            <div className=\"login-page__login-form-wrapper\">\n                <LoginForm />\n            </div>\n        </div>\n    );\n};\n\nexport default LoginPage;\n","import React from 'react';\n\nimport './Header.scss';\n\ninterface IHeaderProps {\n    onActionClick: () => void;\n};\n\nconst Header = (props: IHeaderProps): React.ReactElement => {\n    const { onActionClick } = props;\n\n    const handleClick = (e: React.MouseEvent) => {\n        onActionClick();\n    };\n\n    return (\n        <div className=\"header\">\n            <div className=\"header__content\">\n                <div className=\"header__chat-name\">Socket Chat</div>\n                <div\n                    className=\"header__action-icon\"\n                    title=\"Log out\"\n                    onClick={handleClick}\n                />\n            </div>\n        </div>\n    );\n};\n\nHeader.defautProps = {\n    onActionClick: () => null,\n};\n\nexport default Header;\n","import React, { ReactElement, useEffect, useRef } from 'react';\n\nimport './ChatMessage.scss';\n\ninterface IChatMessage {\n    id: string;\n    userName: string;\n    userMessage: string;\n    userColor?: string;\n};\nconst ChatMessage = (props: IChatMessage): ReactElement => {\n    const { userName, userMessage, userColor } = props;\n    const ref = useRef<HTMLDivElement>(null);\n\n    const cropUserName = (): string => {\n        const name: string = userName.charAt(0).toUpperCase();\n        return name;\n    };\n\n    useEffect(() => {\n        ref.current?.scrollIntoView();\n    });\n\n    return (\n        <div className=\"chat-message\" ref={ref}>\n            <div className=\"chat-message__content\">\n                <div className=\"chat-message__avatar-wrapper\">\n                    <div className=\"chat-message__avatar\" style={{backgroundColor: userColor}}>{cropUserName()}</div>\n                </div>\n                <div className=\"chat-message__user-content\">\n                    <div className=\"chat-message__user-name\" style={{color: userColor}}>{userName}</div>\n                    <div className=\"chat-message__user-message\">{userMessage}</div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nChatMessage.defaultProps = {\n    userName: '',\n    userMessage: '',\n    userColor: '#CCCCCC',\n};\n\nconst MemoizedChatMessage = React.memo(ChatMessage);\n\nexport default MemoizedChatMessage;\n","import React from 'react';\n\nimport './UserActivityInfo.scss';\n\ninterface IUserActivityInfoProps {\n    text: string;\n    userName: string;\n    userQuantity: number;\n};\n\nconst UserActivityInfo = (props: IUserActivityInfoProps): React.ReactElement => {\n    const { text, userName, userQuantity } = props;\n\n    return (\n        <div className=\"user-activity-info\">\n            <div className=\"user-activity-info__content\">\n                <div className=\"user-activity-info__user\">\n                    { (userName && text) && <span>{userName} {text}</span>}\n                </div>\n                <div className=\"user-activity-info__user-quantity\">\n                    <span>participants online: {userQuantity}</span>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nUserActivityInfo.defaultProps = {\n    text: '',\n    userName: '',\n    userQuantity: 0,\n};\n\nconst MemoizedUserActivityInfo = React.memo(UserActivityInfo);\n\nexport default MemoizedUserActivityInfo;\n","export const COLORS: Array<string> = [\n    '#f0a500', '#c15050', '#ce1f6a', '#7eca9c',\n    '#046582', '#92967d', '#8c0000', '#d8c292',\n    '#ff9292', '#3b88eb', '#62959c', '#00917c',\n];\n","import React, { ReactElement} from 'react';\n\nimport './TypingMessage.scss';\n\ninterface ITypingMessageProps {\n    text: string;\n    userColor: string;\n};\n\nconst TypingMessage = (props: ITypingMessageProps): ReactElement => {\n    const { text, userColor } = props;\n    \n    return (\n        <div className=\"typing-message\">\n            <div\n                className=\"typing-message__text\"\n                style={{ color: userColor }}\n            >{text}\n            </div>\n        </div>\n    );\n};\n\nTypingMessage.defaultProps = {\n    text: '',\n    userColor: '#CCCCCC',\n};\n\nconst MemoizedTypingMessage = React.memo(TypingMessage);\n\nexport default MemoizedTypingMessage;\n","import React, { ReactElement } from 'react';\nimport ChatMessage from './ChatMessage';\nimport UserActivityInfo from './UserActivityInfo';\nimport { SocketHandlerNames } from '../../../contstants/socketCommands';\nimport { getUserNameColor } from '../../../utils/userColor';\nimport { ISocketMessage } from '../../../interfaces/ISocketMessages';\n\nimport './ChatMessagesList.scss';\nimport TypingMessage from './TypingMessage';\n\ninterface IChatMessagesListProps {\n    messages: Array<ISocketMessage>;\n    typingData: Array<ISocketMessage>;\n};\n\nconst ChatMessagesList = (props: IChatMessagesListProps): ReactElement => {\n    const { messages, typingData } = props;\n\n    const memoizedGetUserColor = getUserNameColor();\n\n    const renderComponentByType = (data: ISocketMessage) => {\n        let userActivityText: string;\n\n        switch (data.type) {\n            case SocketHandlerNames.NEW_MESSAGE:\n                return renderChatMessage(data);\n            case SocketHandlerNames.USER_JOINED:\n                userActivityText = 'joined 🥳'\n                return renderUserActivityInfo(data, userActivityText);\n            case SocketHandlerNames.USER_LEFT:\n                userActivityText = 'left 🤥'\n                return renderUserActivityInfo(data, userActivityText);\n            case SocketHandlerNames.LOGIN:\n                return renderUserActivityInfo(data);\n            default:\n                return null;\n        }\n    };\n\n    const renderChatMessage = (data: ISocketMessage): ReactElement => (\n        <ChatMessage\n            key={data.id}\n            id={data.id}\n            userName={data.userData?.username}\n            userMessage={data.userData?.message}\n            userColor={memoizedGetUserColor(data.userData?.username || '')}\n        />\n    );\n\n    const renderUserActivityInfo = (data: ISocketMessage, text: string = '') => (\n        <UserActivityInfo\n            key={data.id}\n            userName={data.userData?.username}\n            text={text}\n            userQuantity={data.userData?.numUsers}\n        />\n    );\n\n    return (\n        <div className=\"chat-messages-list\">\n            <div className=\"chat-messages-list__content\">\n                <div className=\"chat-messages-list__welcome-wrapper\">\n                    <div className=\"chat-messages-list__welcome-text\">Welcome to Socket Chat 👋</div>\n                </div>\n                {\n                    messages.map((message: ISocketMessage) => renderComponentByType(message))\n                }\n                <div className=\"chat-messages-list__typing-message\">\n                {\n                    typingData.map((data: ISocketMessage) => (\n                        <TypingMessage\n                            key={data.id}\n                            text={`${data.userData?.username} typing...`}\n                            userColor={memoizedGetUserColor(data.userData?.username || '')}\n                        />\n                    ))\n                }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nChatMessagesList.defaultProps = {\n    messages: [],\n};\n\nexport default ChatMessagesList;\n","import { COLORS } from '../contstants/colors';\n\nexport const getUserNameColor = (): Function => {\n    const cache = new Map();\n\n    return (userName: string): string => {\n        if (cache.has(userName)) return cache.get(userName);\n        else {\n            let hash: number = 7;\n            for (let i = 0; i < userName.length; i++) {\n                hash = userName.charCodeAt(i) + (hash << 5) - hash;\n            }\n            const index = Math.abs(hash % COLORS.length);\n            cache.set(userName, COLORS[index]);\n\n            return COLORS[index];\n        }\n    };  \n};\n","import React, { useEffect, useState } from 'react';\nimport TextInput from '../../ui-kit/TextInput';\nimport Button from '../../ui-kit/Button';\n\nimport './SubmitChatMessageForm.scss';\n\ninterface ISubmitChatMessageFormProps {\n    onSubmit: (message: string) => void;\n    sendTyping: (send: boolean) => void;\n};\n\nconst SubmitChatMessageForm = (props: ISubmitChatMessageFormProps): React.ReactElement => {\n    const { onSubmit, sendTyping } = props;\n    const [value, setValue] = useState<string>('');\n    const [startTyping, setStartTyping] = useState<boolean>(false);\n\n    const handleSubmit = (e: React.MouseEvent<HTMLButtonElement>): void => {\n        e.preventDefault();\n\n        if (!onSubmit) return;\n\n        const message = value.trim();\n        if (message) {\n            onSubmit(message);\n            setValue('');\n        }\n    };\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        if (!startTyping) sendTyping(true);\n\n        setStartTyping(true);\n        setValue(e.target.value);\n    };\n\n    useEffect(() => {\n        let timeout: NodeJS.Timeout;\n        if (startTyping) {\n            timeout = setTimeout(() => {\n                sendTyping(false);\n                setStartTyping(false);\n            }, 500);\n        }\n\n        return () => clearTimeout(timeout);\n    }, [value]);\n\n    return (\n        <div className=\"chat-message-form\">\n            <form action=\"\" className=\"chat-message-form__form\">\n                <div className=\"chat-message-form__field-wrapper\">\n                    <TextInput\n                        name=\"userMessage\"\n                        placeholder=\"Message\"\n                        value={value}\n                        onChange={handleChange}\n                    />\n                </div>\n                <div className=\"chat-message-form__button-wrapper\">\n                    <Button text=\"Send\" type=\"submit\" onClick={handleSubmit}/>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default SubmitChatMessageForm;\n","import React, { ReactElement, useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Header from '../../ui-kit/Header';\nimport ChatMessagesList from '../../ui-kit/ChatMessagesList';\nimport SubmitChatMessageForm from '../../forms/SubmitChatMessageForm';\n\nimport { ISocketMessage } from '../../../interfaces/ISocketMessages';\nimport useWebsocket from '../../../hooks/useWebSocket';\nimport { parseSocketMessage, createUserSentMessageData } from '../../../utils/socketUtils';\nimport { SocketHandlerNames } from '../../../contstants/socketCommands';\nimport { store } from '../../../store/store';\nimport { PathNames } from '../../../contstants/pathNames';\n\nimport './ChatRoomPage.scss';\n\nconst ChatRoomPage = (): ReactElement => {\n    const [messagesData, setMessagesData] = useState<Array<ISocketMessage>>([]);\n    const [typingData, setTypingData] = useState<Array<ISocketMessage>>([]);\n    const { state: contextState } = useContext(store);\n    const history = useHistory();\n \n    const {\n        sucbscribe,\n        unsucbscribe,\n        sendMessage,\n        sendTypingMessage,\n        logout,\n    } = useWebsocket();\n\n    const messagesHandler = (message: string): void => {\n        const data: ISocketMessage = parseSocketMessage(message);\n\n        switch (data?.type) {\n            case SocketHandlerNames.TYPYNG:\n                return setTypingData((prev: Array<ISocketMessage>) => [...prev, data]);\n\n            case SocketHandlerNames.STOP_TYPING:\n                const filtered: Array<ISocketMessage> = typingData.filter((obj: ISocketMessage) => obj.userData?.username !== data.userData?.username );\n                return setTypingData(filtered);\n\n            default:\n                return setMessagesData((prev: Array<ISocketMessage>) => [...prev, data]);\n        }\n    };\n\n    const handleSubmit = (message: string): void => {\n        if (message) {\n            const user: ISocketMessage = createUserSentMessageData(SocketHandlerNames.NEW_MESSAGE, contextState.userName, message);\n\n            sendMessage(message);\n            setMessagesData((state: Array<ISocketMessage>) => [...state, user]);\n        };\n    };\n\n    const handleTyping = (send: boolean) => sendTypingMessage(contextState.userName, send);\n\n    const handleLogOut = () => {\n        history.push(PathNames.LOGIN);\n        logout();\n    }\n\n    useEffect(() => {\n        if (!contextState.isLogged) {\n            history.push(PathNames.LOGIN);\n            return;\n        }\n\n        sucbscribe(messagesHandler);\n\n        return () => unsucbscribe(messagesHandler);\n    });\n\n    return (\n        <div className=\"chat-room-page\">\n            <Header onActionClick={handleLogOut} />\n            <div className=\"chat-room-page__content\">\n                <ChatMessagesList messages={messagesData} typingData={typingData}/>\n                <SubmitChatMessageForm\n                    onSubmit={handleSubmit}\n                    sendTyping={handleTyping}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default ChatRoomPage;","import { v4 as uuidv4 } from 'uuid';\nimport { ISocketMessage } from '../interfaces/ISocketMessages';\n\nexport const parseSocketMessage = (message: string): ISocketMessage=> {\n    if (message === '40' || message === '3') return {} as ISocketMessage;\n    const sliceMessage: string = message.slice(2, message.length);\n    const parsedMessage = JSON.parse(sliceMessage);\n    const messageData: ISocketMessage = {\n        id: uuidv4(),\n        type: parsedMessage[0],\n        userData: { ...parsedMessage[1] } \n    };\n\n    return messageData;\n};\n\nexport const createUserSentMessageData = (type: string, userName: string, message: string, ): ISocketMessage => {\n    const userData: ISocketMessage = {\n        id: uuidv4(),\n        type: type,\n        userData: {\n            username: userName,\n            message\n        }\n    };\n\n    return userData;\n};\n","import { Redirect, Switch, HashRouter } from 'react-router-dom';\nimport Route from './Route/Route';\nimport LoginPage from '../pages/LoginPage';\nimport ChatRoomPage from '../pages/ChatRoomPage';\nimport { PathNames } from '../../contstants/pathNames';\n\nconst Routes = () => {\n    return (\n        <HashRouter basename=\"/\">\n            <Switch>\n                <Route\n                    exact\n                    path={PathNames.LOGIN}\n                    component={LoginPage}\n                />\n                <Route\n                    exact\n                    path={PathNames.CHAT_ROOM}\n                    component={ChatRoomPage}\n                />\n                <Redirect to={PathNames.LOGIN} />\n            </Switch>\n       </HashRouter>\n    );\n}\n\nexport default Routes;\n","import React, { ReactElement } from 'react';\nimport { StateProvider } from '../../store/store';\nimport Routes from '../routes/Routes';\n\nimport './App.scss';\nimport '../../assets/styles/reset.scss';\n\n\nconst App = (): ReactElement => (\n    <StateProvider>\n        <Routes />\n    </StateProvider>\n)\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}